const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder } = require('discord.js');
const { saveConfig } = require('../config/saveConfig');


async function handleInteraction(interaction, client, guildConfig) {
    try {
        // Logging para debug
        //console.log('Intera√ß√£o recebida:', interaction.customId);

        // Switch case para todos os tipos de intera√ß√£o
        switch (interaction.customId) {
            case 'mod_antiraid_panel':
                await showAntiRaidPanel(interaction, guildConfig);
                break;

            case 'mod_antiraid_toggle':
                const botRole = interaction.guild.members.me.roles.highest;
                const highestRole = interaction.guild.roles.highest;
                if (botRole.position < highestRole.position) {
                    await interaction.reply({
                        content: '‚ùå N√£o posso ativar o sistema Anti-Raid, pois meu cargo √© menor que o cargo mais alto do servidor.',
                        ephemeral: true
                    });
                    return;
                }
                await toggleAntiRaid(interaction, guildConfig);
                break;

            // Prote√ß√£o de Canais
            case 'mod_antiraid_channel_protection':
                await configureChannelProtection(interaction, guildConfig);
                break;
            case 'mod_antiraid_channel_toggle':
                
                await toggleChannelProtection(interaction, guildConfig);
                break;

            // Prote√ß√£o de Cargos
            case 'mod_antiraid_role_protection':
                await configureRoleProtection(interaction, guildConfig);
                break;
            case 'mod_antiraid_role_toggle':
                await toggleRoleProtection(interaction, guildConfig);
                break;

            // Prote√ß√£o contra Banimentos
            case 'mod_antiraid_ban_protection':
                await configureBanProtection(interaction, guildConfig);
                break;
            case 'mod_antiraid_ban_toggle':
                await toggleBanProtection(interaction, guildConfig);
                break;

            // Prote√ß√£o contra Expuls√µes
            case 'mod_antiraid_kick_protection':
                await configureKickProtection(interaction, guildConfig);
                break;
            case 'mod_antiraid_kick_toggle':
                await toggleKickProtection(interaction, guildConfig);
                break;
        }

        // Handler para menus de sele√ß√£o
        if (interaction.isStringSelectMenu()) {
            switch (interaction.customId) {
                case 'mod_antiraid_channel_action':
                    await handleChannelActionSelect(interaction, guildConfig);
                    break;
                case 'mod_antiraid_role_action':
                    await handleRoleActionSelect(interaction, guildConfig);
                    break;
                case 'mod_antiraid_ban_action':
                    await handleBanActionSelect(interaction, guildConfig);
                    break;
                case 'mod_antiraid_ban_threshold':
                    await handleBanThresholdSelect(interaction, guildConfig);
                    break;
                case 'mod_antiraid_kick_action':
                    await handleKickActionSelect(interaction, guildConfig);
                    break;
                case 'mod_antiraid_kick_threshold':
                    await handleKickThresholdSelect(interaction, guildConfig);
                    break;
            }
        }

    } catch (error) {
        console.error('Erro ao processar intera√ß√£o:', error);
        await handleError(interaction, error);
    }
}



async function showAntiRaidPanel(interaction, guildConfig) {
    // Inicializar configura√ß√£o se n√£o existir
    if (!guildConfig.antiRaid) {
        guildConfig.antiRaid = {
            enabled: false,
            channelProtection: { enabled: false, action: 'removePermissions' },
            roleProtection: { enabled: false, action: 'removePermissions' },
            banProtection: { enabled: false, action: 'ban', threshold: 5 },
            kickProtection: { enabled: false, action: 'removePermissions', threshold: 5 }
        };
        await saveConfig(interaction.guild.id, guildConfig);
    }

    const embed = new EmbedBuilder()
        .setTitle('üîí Configura√ß√£o do Sistema Anti-Raid')
        .setDescription('Configure as prote√ß√µes contra a√ß√µes maliciosas em seu servidor.')
        .setColor('#FF3333')
        .addFields(
            {
                name: 'üìä Status Atual',
                value: guildConfig.antiRaid.enabled ? 'Sistema Anti-Raid est√° **ATIVADO**' : 'Sistema Anti-Raid est√° **DESATIVADO**',
                inline: false
            },
            {
                name: 'üîß Prote√ß√µes Dispon√≠veis',
                value: 'Configure cada tipo de prote√ß√£o individualmente:',
                inline: false
            },
            {
                name: 'üì∫ Prote√ß√£o de Canais',
                value: `Status: ${guildConfig.antiRaid.channelProtection.enabled ? '‚úÖ Ativado' : '‚ùå Desativado'}\nA√ß√£o: ${getActionName(guildConfig.antiRaid.channelProtection.action)}`,
                inline: true
            },
            {
                name: 'üè∑Ô∏è Prote√ß√£o de Cargos',
                value: `Status: ${guildConfig.antiRaid.roleProtection.enabled ? '‚úÖ Ativado' : '‚ùå Desativado'}\nA√ß√£o: ${getActionName(guildConfig.antiRaid.roleProtection.action)}`,
                inline: true
            },
            {
                name: 'üî® Prote√ß√£o contra Banimentos',
                value: `Status: ${guildConfig.antiRaid.banProtection.enabled ? '‚úÖ Ativado' : '‚ùå Desativado'}\nA√ß√£o: ${getActionName(guildConfig.antiRaid.banProtection.action)}\nLimite: ${guildConfig.antiRaid.banProtection.threshold} banimentos`,
                inline: true
            },
            {
                name: 'üë¢ Prote√ß√£o contra Expuls√µes',
                value: `Status: ${guildConfig.antiRaid.kickProtection.enabled ? '‚úÖ Ativado' : '‚ùå Desativado'}\nA√ß√£o: ${getActionName(guildConfig.antiRaid.kickProtection.action)}\nLimite: ${guildConfig.antiRaid.kickProtection.threshold} expuls√µes`,
                inline: true
            }
        );

    // const row1 = new ActionRowBuilder().addComponents(
    //     new ButtonBuilder()
    //         .setCustomId('mod_antiraid_toggle')
    //         .setLabel(guildConfig.antiRaid.enabled ? 'Desativar Sistema' : 'Ativar Sistema')
    //         .setStyle(guildConfig.antiRaid.enabled ? ButtonStyle.Danger : ButtonStyle.Success)
    //         .setEmoji(guildConfig.antiRaid.enabled ? '<:lockalt:1365941662022504530>' : '<:lockalt:1365941662022504530>'),
    // );

    const row2 = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
            .setCustomId('mod_antiraid_channel_protection')
            .setLabel('Prote√ß√£o de Canais')
            .setStyle(ButtonStyle.Primary)
            .setEmoji('<:1289362293456633942:1364987313750282251>'),
        new ButtonBuilder()
            .setCustomId('mod_antiraid_role_protection')
            .setLabel('Prote√ß√£o de Cargos')
            .setStyle(ButtonStyle.Primary)
            .setEmoji('<:at:1365940208389980251>')
    );

    const row3 = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
            .setCustomId('mod_antiraid_ban_protection')
            .setLabel('Prote√ß√£o contra Banimentos')
            .setStyle(ButtonStyle.Primary)
            .setEmoji('<:Report_NeverMiss:1365940951922774126>'),
        new ButtonBuilder()
            .setCustomId('mod_antiraid_kick_protection')
            .setLabel('Prote√ß√£o contra Expuls√µes')
            .setStyle(ButtonStyle.Primary)
            .setEmoji('<:1289361467912618077:1364987310554349639>')
    );

    const row4 = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
            .setCustomId('configModeracao')
            .setStyle(ButtonStyle.Secondary)
            .setEmoji('<:voltar:1365849508059287633>'),
        new ButtonBuilder()
            .setCustomId('mod_antiraid_toggle')
            .setLabel(guildConfig.antiRaid.enabled ? 'Desativar Sistema' : 'Ativar Sistema')
            .setStyle(guildConfig.antiRaid.enabled ? ButtonStyle.Danger : ButtonStyle.Success)
            .setEmoji(guildConfig.antiRaid.enabled ? '<:lockopenalt:1365941664199217204>' : '<:lockalt:1365941662022504530>')
    );

    await interaction.update({
        embeds: [embed],
        components: [row2, row3, row4],
        ephemeral: true
    });
}


async function toggleAntiRaid(interaction, guildConfig) {
    guildConfig.antiRaid.enabled = !guildConfig.antiRaid.enabled;
    await saveConfig(interaction.guild.id, guildConfig);

    await showAntiRaidPanel(interaction, guildConfig);
}


async function configureRoleProtection(interaction, guildConfig) {
    try {
        // Criar embed informativo
        const embed = new EmbedBuilder()
            .setTitle('üè∑Ô∏è Configura√ß√£o de Prote√ß√£o de Cargos')
            .setDescription('Configure como o sistema deve reagir quando algu√©m tentar excluir ou modificar cargos em massa.')
            .setColor('#3498DB')
            .addFields(
                {
                    name: 'üìä Status Atual',
                    value: guildConfig.antiRaid.roleProtection.enabled ? 'Prote√ß√£o est√° **ATIVADA**' : 'Prote√ß√£o est√° **DESATIVADA**',
                    inline: false
                },
                {
                    name: 'üîß A√ß√£o Atual',
                    value: `Quando detectar exclus√£o de cargos: **${getActionName(guildConfig.antiRaid.roleProtection.action)}**`,
                    inline: false
                }
            );

        // Criar bot√µes de a√ß√£o
        const toggleButton = new ButtonBuilder()
            .setCustomId('mod_antiraid_role_toggle')
            .setLabel(guildConfig.antiRaid.roleProtection.enabled ? 'Desativar Prote√ß√£o' : 'Ativar Prote√ß√£o')
            .setStyle(guildConfig.antiRaid.roleProtection.enabled ? ButtonStyle.Danger : ButtonStyle.Success)
            .setEmoji(guildConfig.antiRaid.roleProtection.enabled ? '<:lockalt:1365941662022504530>' : '<:lockalt:1365941662022504530>');

        const backButton = new ButtonBuilder()
            .setCustomId('mod_antiraid_panel')
            .setStyle(ButtonStyle.Secondary)
            .setEmoji('<:voltar:1365849508059287633>');

        // Criar select menu de a√ß√µes
        const actionSelect = new StringSelectMenuBuilder()
            .setCustomId('mod_antiraid_role_action')
            .setPlaceholder('Selecione a a√ß√£o a ser tomada')
            .addOptions([
                { 
                    label: 'Remover Permiss√µes', 
                    description: 'Remove todas as permiss√µes administrativas do usu√°rio', 
                    value: 'removePermissions', 
                    emoji: '<:lockalt:1365941662022504530>' 
                },
                { 
                    label: 'Banir Usu√°rio', 
                    description: 'Bane o usu√°rio do servidor', 
                    value: 'ban', 
                    emoji: 'üî®' 
                },
                { 
                    label: 'Expulsar Usu√°rio', 
                    description: 'Expulsa o usu√°rio do servidor', 
                    value: 'kick', 
                    emoji: 'üë¢' 
                },
                { 
                    label: 'Remover Todos os Cargos', 
                    description: 'Remove todos os cargos do usu√°rio', 
                    value: 'removeRoles', 
                    emoji: 'üè∑Ô∏è' 
                }
            ]);

        // Organizar componentes em rows
        const row1 = new ActionRowBuilder().addComponents(actionSelect);
        const row2 = new ActionRowBuilder().addComponents(toggleButton, backButton); // Bot√µes lado a lado

        // Atualizar interface com tratamento adequado do estado da intera√ß√£o
        const updateOptions = {
            embeds: [embed],
            components: [row1, row2],
            ephemeral: true
        };

        if (interaction.deferred || interaction.replied) {
            await interaction.update(updateOptions);
        } else {
            await interaction.update(updateOptions);
        }

    } catch (error) {
        console.error('Erro ao configurar prote√ß√£o de cargos:', error);
        
        // Tratamento de erro aprimorado
        const errorRow = new ActionRowBuilder().addComponents(
            new ButtonBuilder()
                .setCustomId('mod_antiraid_panel')
                .setLabel('Voltar')
                .setStyle(ButtonStyle.Secondary)
                .setEmoji('<:voltar:1365849508059287633>')
        );

        const errorResponse = {
            content: '‚ùå Ocorreu um erro ao configurar a prote√ß√£o de cargos. Por favor, tente novamente.',
            components: [errorRow],
            ephemeral: true
        };

        if (interaction.deferred || interaction.replied) {
            await interaction.followUp(errorResponse);
        } else {
            await interaction.update(errorResponse);
        }
    }
}


async function configureBanProtection(interaction, guildConfig) {
    try {
        const embed = new EmbedBuilder()
            .setTitle('üî® Configura√ß√£o de Prote√ß√£o contra Banimentos')
            .setDescription('Configure como o sistema deve reagir quando algu√©m tentar banir membros em massa.')
            .setColor('#3498DB')
            .addFields(
                {
                    name: 'üìä Status Atual',
                    value: guildConfig.antiRaid.banProtection.enabled ? 'Prote√ß√£o est√° **ATIVADA**' : 'Prote√ß√£o est√° **DESATIVADA**',
                    inline: false
                },
                {
                    name: 'üîß Configura√ß√µes Atuais',
                    value: `A√ß√£o: **${getActionName(guildConfig.antiRaid.banProtection.action)}**\nLimite: **${guildConfig.antiRaid.banProtection.threshold}** banimentos em 1 minuto`,
                    inline: false
                }
            );

        const toggleButton = new ButtonBuilder()
            .setCustomId('mod_antiraid_ban_toggle')
            .setLabel(guildConfig.antiRaid.banProtection.enabled ? 'Desativar Prote√ß√£o' : 'Ativar Prote√ß√£o')
            .setStyle(guildConfig.antiRaid.banProtection.enabled ? ButtonStyle.Danger : ButtonStyle.Success)
            .setEmoji(guildConfig.antiRaid.banProtection.enabled ? '<:lockalt:1365941662022504530>' : '<:lockalt:1365941662022504530>');

        const backButton = new ButtonBuilder()
            .setCustomId('mod_antiraid_panel')
            .setStyle(ButtonStyle.Secondary)
            .setEmoji('<:voltar:1365849508059287633>');

        const actionSelect = new StringSelectMenuBuilder()
            .setCustomId('mod_antiraid_ban_action')
            .setPlaceholder('Selecione a a√ß√£o a ser tomada')
            .addOptions([
                { label: 'Banir Usu√°rio', description: 'Bane o usu√°rio do servidor', value: 'ban', emoji: 'üî®' },
                { label: 'Remover Permiss√µes', description: 'Remove todas as permiss√µes administrativas do usu√°rio', value: 'removePermissions', emoji: '<:lockalt:1365941662022504530>' },
                { label: 'Remover Todos os Cargos', description: 'Remove todos os cargos do usu√°rio', value: 'removeRoles', emoji: 'üè∑Ô∏è' }
            ]);

        const thresholdSelect = new StringSelectMenuBuilder()
            .setCustomId('mod_antiraid_ban_threshold')
            .setPlaceholder('Selecione o limite de banimentos')
            .addOptions([
                { label: '3 banimentos', value: '3', emoji: '3Ô∏è‚É£' },
                { label: '5 banimentos', value: '5', emoji: '5Ô∏è‚É£' },
                { label: '7 banimentos', value: '7', emoji: '7Ô∏è‚É£' },
                { label: '10 banimentos', value: '10', emoji: 'üîü' }
            ]);

        const row1 = new ActionRowBuilder().addComponents(actionSelect);
        const row2 = new ActionRowBuilder().addComponents(thresholdSelect);
        const row3 = new ActionRowBuilder().addComponents(toggleButton, backButton); // Bot√µes juntos na mesma row

        if (interaction.deferred || interaction.replied) {
            await interaction.update({
                embeds: [embed],
                components: [row1, row2, row3]
            });
        } else {
            await interaction.update({
                embeds: [embed],
                components: [row1, row2, row3],
                ephemeral: true
            });
        }
    } catch (error) {
        console.error('Erro ao configurar prote√ß√£o contra banimentos:', error);
        handleError(interaction, error);
    }
}


async function configureKickProtection(interaction, guildConfig) {
    try {
        // Valida√ß√£o b√°sica da configura√ß√£o
        if (!guildConfig?.antiRaid?.kickProtection) {
            throw new Error('Configura√ß√£o de prote√ß√£o contra expuls√µes inv√°lida');
        }

        const embed = new EmbedBuilder()
            .setTitle('üë¢ Configura√ß√£o de Prote√ß√£o contra Expuls√µes')
            .setDescription('Configure como o sistema deve reagir quando algu√©m tentar expulsar membros em massa.')
            .setColor('#3498DB')
            .addFields(
                {
                    name: 'üìä Status Atual',
                    value: guildConfig.antiRaid.kickProtection.enabled ? 'Prote√ß√£o est√° **ATIVADA**' : 'Prote√ß√£o est√° **DESATIVADA**',
                    inline: false
                },
                {
                    name: 'üîß Configura√ß√µes Atuais',
                    value: `A√ß√£o: **${getActionName(guildConfig.antiRaid.kickProtection.action)}**\nLimite: **${guildConfig.antiRaid.kickProtection.threshold}** expuls√µes em 1 minuto`,
                    inline: false
                }
            );

        // Bot√µes de controle
        const toggleButton = new ButtonBuilder()
            .setCustomId('mod_antiraid_kick_toggle')
            .setLabel(guildConfig.antiRaid.kickProtection.enabled ? 'Desativar Prote√ß√£o' : 'Ativar Prote√ß√£o')
            .setStyle(guildConfig.antiRaid.kickProtection.enabled ? ButtonStyle.Danger : ButtonStyle.Success)
            .setEmoji(guildConfig.antiRaid.kickProtection.enabled ? '<:lockalt:1365941662022504530>' : '<:lockalt:1365941662022504530>');

        const backButton = new ButtonBuilder()
            .setCustomId('mod_antiraid_panel')
            .setStyle(ButtonStyle.Secondary)
            .setEmoji('<:voltar:1365849508059287633>');

        // Menus de sele√ß√£o
        const actionSelect = new StringSelectMenuBuilder()
            .setCustomId('mod_antiraid_kick_action')
            .setPlaceholder('Selecione a a√ß√£o a ser tomada')
            .addOptions([
                { label: 'Banir Usu√°rio', description: 'Bane o usu√°rio do servidor', value: 'ban', emoji: 'üî®' },
                { label: 'Remover Permiss√µes', description: 'Remove todas as permiss√µes administrativas do usu√°rio', value: 'removePermissions', emoji: '<:lockalt:1365941662022504530>' },
                { label: 'Remover Todos os Cargos', description: 'Remove todos os cargos do usu√°rio', value: 'removeRoles', emoji: 'üè∑Ô∏è' }
            ]);

        const thresholdSelect = new StringSelectMenuBuilder()
            .setCustomId('mod_antiraid_kick_threshold')
            .setPlaceholder('Selecione o limite de expuls√µes')
            .addOptions([
                { label: '3 expuls√µes', value: '3', emoji: '3Ô∏è‚É£' },
                { label: '5 expuls√µes', value: '5', emoji: '5Ô∏è‚É£' },
                { label: '7 expuls√µes', value: '7', emoji: '7Ô∏è‚É£' },
                { label: '10 expuls√µes', value: '10', emoji: 'üîü' }
            ]);

        // Organiza√ß√£o dos componentes em rows
        const rows = [
            new ActionRowBuilder().addComponents(actionSelect),
            new ActionRowBuilder().addComponents(thresholdSelect),
            new ActionRowBuilder().addComponents(toggleButton, backButton) // Bot√µes juntos na mesma row
        ];

        // Atualizar interface
        const updateOptions = {
            embeds: [embed],
            components: rows,
            ephemeral: true
        };

        await interaction[interaction.deferred || interaction.replied ? 'update' : 'update'](updateOptions);

    } catch (error) {
        console.error('Erro ao configurar prote√ß√£o contra expuls√µes:', error);
        await handleError(interaction, error);
    }
}


function getActionName(actionCode) {
    const actions = {
        'removePermissions': 'Remover Permiss√µes',
        'ban': 'Banir Usu√°rio',
        'kick': 'Expulsar Usu√°rio',
        'removeRoles': 'Remover Todos os Cargos'
    };

    return actions[actionCode] || 'Desconhecida';
}

async function toggleChannelProtection(interaction, guildConfig) {
    try {
        // Inverter o estado atual
        guildConfig.antiRaid.channelProtection.enabled = !guildConfig.antiRaid.channelProtection.enabled;

        // Salvar configura√ß√£o
        await saveConfig(interaction.guild.id, guildConfig);

        // Atualizar o painel
        await configureChannelProtection(interaction, guildConfig);

        // Enviar feedback
        await interaction.followUp({
            content: `Prote√ß√£o de canais ${guildConfig.antiRaid.channelProtection.enabled ? 'ativada' : 'desativada'} com sucesso!`,
            ephemeral: true
        });
    } catch (error) {
        console.error('Erro ao alternar prote√ß√£o de canais:', error);
        await interaction.followUp({
            content: 'Ocorreu um erro ao processar sua solicita√ß√£o.',
            ephemeral: true
        });
    }
}


async function handleChannelActionSelect(interaction, guildConfig) {
    try {
        // Obter a a√ß√£o selecionada
        const selectedAction = interaction.values[0];

        // Atualizar configura√ß√£o
        guildConfig.antiRaid.channelProtection.action = selectedAction;

        // Salvar configura√ß√£o
        await saveConfig(interaction.guild.id, guildConfig);

        // Atualizar o painel
        await configureChannelProtection(interaction, guildConfig);

        // Enviar feedback
        await interaction.followUp({
            content: `A√ß√£o de prote√ß√£o atualizada para: ${getActionName(selectedAction)}`,
            ephemeral: true
        });
    } catch (error) {
        console.error('Erro ao processar sele√ß√£o de a√ß√£o:', error);
        await interaction.followUp({
            content: 'Ocorreu um erro ao processar sua solicita√ß√£o.',
            ephemeral: true
        });
    }
}

async function toggleRoleProtection(interaction, guildConfig) {
    try {
        guildConfig.antiRaid.roleProtection.enabled = !guildConfig.antiRaid.roleProtection.enabled;
        await saveConfig(interaction.guild.id, guildConfig);
        await configureRoleProtection(interaction, guildConfig);

        await interaction.followUp({
            content: `Prote√ß√£o de cargos ${guildConfig.antiRaid.roleProtection.enabled ? 'ativada' : 'desativada'} com sucesso!`,
            ephemeral: true
        });
    } catch (error) {
        console.error('Erro ao alternar prote√ß√£o de cargos:', error);
        handleError(interaction, error);
    }
}

async function handleRoleActionSelect(interaction, guildConfig) {
    try {
        const selectedAction = interaction.values[0];
        guildConfig.antiRaid.roleProtection.action = selectedAction;
        await saveConfig(interaction.guild.id, guildConfig);
        await configureRoleProtection(interaction, guildConfig);

        await interaction.followUp({
            content: `A√ß√£o de prote√ß√£o de cargos atualizada para: ${getActionName(selectedAction)}`,
            ephemeral: true
        });
    } catch (error) {
        console.error('Erro ao processar sele√ß√£o de a√ß√£o:', error);
        handleError(interaction, error);
    }
}

// Handlers para prote√ß√£o contra banimentos
async function toggleBanProtection(interaction, guildConfig) {
    try {
        guildConfig.antiRaid.banProtection.enabled = !guildConfig.antiRaid.banProtection.enabled;
        await saveConfig(interaction.guild.id, guildConfig);
        await configureBanProtection(interaction, guildConfig);

        await interaction.followUp({
            content: `Prote√ß√£o contra banimentos ${guildConfig.antiRaid.banProtection.enabled ? 'ativada' : 'desativada'} com sucesso!`,
            ephemeral: true
        });
    } catch (error) {
        console.error('Erro ao alternar prote√ß√£o contra banimentos:', error);
        handleError(interaction, error);
    }
}

async function handleBanActionSelect(interaction, guildConfig) {
    try {
        const selectedAction = interaction.values[0];
        guildConfig.antiRaid.banProtection.action = selectedAction;
        await saveConfig(interaction.guild.id, guildConfig);
        await configureBanProtection(interaction, guildConfig);

        await interaction.followUp({
            content: `A√ß√£o de prote√ß√£o contra banimentos atualizada para: ${getActionName(selectedAction)}`,
            ephemeral: true
        });
    } catch (error) {
        console.error('Erro ao processar sele√ß√£o de a√ß√£o:', error);
        handleError(interaction, error);
    }
}

async function handleBanThresholdSelect(interaction, guildConfig) {
    try {
        const threshold = parseInt(interaction.values[0]);
        guildConfig.antiRaid.banProtection.threshold = threshold;
        await saveConfig(interaction.guild.id, guildConfig);
        await configureBanProtection(interaction, guildConfig);

        await interaction.followUp({
            content: `Limite de banimentos atualizado para: ${threshold}`,
            ephemeral: true
        });
    } catch (error) {
        console.error('Erro ao processar sele√ß√£o de limite:', error);
        handleError(interaction, error);
    }
}

// Handlers para prote√ß√£o contra expuls√µes
async function toggleKickProtection(interaction, guildConfig) {
    try {
        guildConfig.antiRaid.kickProtection.enabled = !guildConfig.antiRaid.kickProtection.enabled;
        await saveConfig(interaction.guild.id, guildConfig);
        await configureKickProtection(interaction, guildConfig);

        await interaction.followUp({
            content: `Prote√ß√£o contra expuls√µes ${guildConfig.antiRaid.kickProtection.enabled ? 'ativada' : 'desativada'} com sucesso!`,
            ephemeral: true
        });
    } catch (error) {
        console.error('Erro ao alternar prote√ß√£o contra expuls√µes:', error);
        handleError(interaction, error);
    }
}

async function handleKickActionSelect(interaction, guildConfig) {
    try {
        const selectedAction = interaction.values[0];
        guildConfig.antiRaid.kickProtection.action = selectedAction;
        await saveConfig(interaction.guild.id, guildConfig);
        await configureKickProtection(interaction, guildConfig);

        await interaction.followUp({
            content: `A√ß√£o de prote√ß√£o contra expuls√µes atualizada para: ${getActionName(selectedAction)}`,
            ephemeral: true
        });
    } catch (error) {
        console.error('Erro ao processar sele√ß√£o de a√ß√£o:', error);
        handleError(interaction, error);
    }
}

async function handleKickThresholdSelect(interaction, guildConfig) {
    try {
        const threshold = parseInt(interaction.values[0]);
        guildConfig.antiRaid.kickProtection.threshold = threshold;
        await saveConfig(interaction.guild.id, guildConfig);
        await configureKickProtection(interaction, guildConfig);

        await interaction.followUp({
            content: `Limite de expuls√µes atualizado para: ${threshold}`,
            ephemeral: true
        });
    } catch (error) {
        console.error('Erro ao processar sele√ß√£o de limite:', error);
        handleError(interaction, error);
    }
}

// Fun√ß√£o auxiliar para tratamento de erros
function handleError(interaction, error) {
    const errorMessage = {
        content: 'Ocorreu um erro ao processar sua solicita√ß√£o.',
        ephemeral: true
    };

    if (interaction.deferred || interaction.replied) {
        interaction.followUp(errorMessage);
    } else {
        interaction.update(errorMessage);
    }
}

/**
 * Configura prote√ß√£o de canais (modificada)
 */
async function configureChannelProtection(interaction, guildConfig) {
    try {
        const embed = new EmbedBuilder()
            .setTitle('üì∫ Configura√ß√£o de Prote√ß√£o de Canais')
            .setDescription('Configure como o sistema deve reagir quando algu√©m tentar excluir ou modificar canais em massa.')
            .setColor('#3498DB')
            .addFields(
                {
                    name: 'üìä Status Atual',
                    value: guildConfig.antiRaid.channelProtection.enabled ? 'Prote√ß√£o est√° **ATIVADA**' : 'Prote√ß√£o est√° **DESATIVADA**',
                    inline: false
                },
                {
                    name: 'üîß A√ß√£o Atual',
                    value: `Quando detectar exclus√£o de canais: **${getActionName(guildConfig.antiRaid.channelProtection.action)}**`,
                    inline: false
                }
            );

        // Criar os bot√µes corretamente
        const toggleButton = new ButtonBuilder()
            .setCustomId('mod_antiraid_channel_toggle')
            .setLabel(guildConfig.antiRaid.channelProtection.enabled ? 'Desativar Prote√ß√£o' : 'Ativar Prote√ß√£o')
            .setStyle(guildConfig.antiRaid.channelProtection.enabled ? ButtonStyle.Danger : ButtonStyle.Success)
            .setEmoji(guildConfig.antiRaid.channelProtection.enabled ? '<:lockalt:1365941662022504530>' : '<:lockalt:1365941662022504530>');

        const backButton = new ButtonBuilder()
            .setCustomId('mod_antiraid_panel')
            .setStyle(ButtonStyle.Secondary)
            .setEmoji('<:voltar:1365849508059287633>');

        const actionSelect = new StringSelectMenuBuilder()
            .setCustomId('mod_antiraid_channel_action')
            .setPlaceholder('Selecione a a√ß√£o a ser tomada')
            .addOptions([
                { label: 'Remover Permiss√µes', description: 'Remove todas as permiss√µes administrativas do usu√°rio', value: 'removePermissions', emoji: '<:lockalt:1365941662022504530>' },
                { label: 'Banir Usu√°rio', description: 'Bane o usu√°rio do servidor', value: 'ban', emoji: 'üî®' },
                { label: 'Expulsar Usu√°rio', description: 'Expulsa o usu√°rio do servidor', value: 'kick', emoji: 'üë¢' },
                { label: 'Remover Todos os Cargos', description: 'Remove todos os cargos do usu√°rio', value: 'removeRoles', emoji: 'üè∑Ô∏è' }
            ]);

        // Organizar os componentes em rows
        const row1 = new ActionRowBuilder().addComponents(actionSelect);
        const row2 = new ActionRowBuilder().addComponents(toggleButton, backButton); // Bot√µes na mesma row

        // Atualizar a intera√ß√£o
        if (interaction.deferred || interaction.replied) {
            await interaction.update({
                embeds: [embed],
                components: [row1, row2]
            });
        } else {
            await interaction.update({
                embeds: [embed],
                components: [row1, row2],
                ephemeral: true
            });
        }
    } catch (error) {
        console.error('Erro ao configurar prote√ß√£o de canais:', error);

        // Melhor tratamento de erro com bot√£o de retorno
        const errorRow = new ActionRowBuilder().addComponents(
            new ButtonBuilder()
                .setCustomId('mod_antiraid_panel')
                .setLabel('Voltar')
                .setStyle(ButtonStyle.Secondary)
                .setEmoji('<:voltar:1365849508059287633>')
        );

        const errorResponse = {
            content: '‚ùå Ocorreu um erro ao processar sua solicita√ß√£o. Por favor, tente novamente.',
            components: [errorRow],
            ephemeral: true
        };

        if (interaction.deferred || interaction.replied) {
            await interaction.followUp(errorResponse);
        } else {
            await interaction.update(errorResponse);
        }
    }
}

module.exports = {
    handleInteraction,
    toggleRoleProtection,
    handleRoleActionSelect,
    toggleBanProtection,
    handleBanActionSelect,
    handleBanThresholdSelect,
    toggleKickProtection,
    handleKickActionSelect,
    handleKickThresholdSelect
};