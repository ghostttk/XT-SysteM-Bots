const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ChannelSelectMenuBuilder, ChannelType } = require('discord.js');
const { saveConfig } = require('../config/saveConfig');
const { createConfigEmbed } = require('./utils');

async function handleInteraction(interaction, client, guildConfig) {
    try {
        // Log para debug
        //console.log('Intera√ß√£o recebida:', interaction.customId);

        switch (interaction.customId) {
            case 'mod_logs_panel':
                await showLogsPanel(interaction, guildConfig);
                break;
            case 'mod_logs_toggle':
                await toggleLogs(interaction, guildConfig);
                break;
            case 'mod_logs_security':
                await configureSecurityLogs(interaction, guildConfig);
                break;
            case 'mod_logs_moderation':
                await configureModerationLogs(interaction, guildConfig);
                break;
            case 'mod_logs_server':
                await configureServerLogs(interaction, guildConfig);
                break;
        }

        // Handler para sele√ß√£o de canais
        try {
            if (interaction.isChannelSelectMenu()) {
                switch (interaction.customId) {
                    case 'mod_logs_security_channel':
                        await handleSecurityChannelSelect(interaction, guildConfig);
                        break;
                    case 'mod_logs_moderation_channel':
                        await handleModerationChannelSelect(interaction, guildConfig);
                        break;
                    case 'mod_logs_server_channel':
                        await handleServerChannelSelect(interaction, guildConfig);
                        break;
                }
                return;
            }
        } catch (error) {
            console.error('Erro ao processar intera√ß√£o:', error);
            await interaction.update({
                content: '‚ùå Ocorreu um erro ao processar sua solicita√ß√£o.',
                components: [
                    new ActionRowBuilder().addComponents(
                        new ButtonBuilder()
                            .setCustomId('mod_logs_panel')
                            .setStyle(ButtonStyle.Secondary)
                            .setEmoji('<:voltar:1365849508059287633>')
                    )
                ],
                ephemeral: true
            });
        }
    } catch (error) {
        console.error('Erro ao processar intera√ß√£o:', error);
        await handleError(interaction);
    }
}

async function showLogsPanel(interaction, guildConfig) {
    if (!guildConfig.logs) {
        guildConfig.logs = {
            enabled: false,
            securityChannel: null,
            moderationChannel: null,
            serverChannel: null
        };
        await saveConfig(interaction.guild.id, guildConfig);
    }

    const embed = createConfigEmbed(
        'üìù Configura√ß√£o de Logs',
        'Configure os canais onde ser√£o registrados os eventos do servidor.',
        '#00FF00'
    )
        .addFields(
            {
                name: 'üìä Status',
                value: guildConfig.logs.enabled ? '‚úÖ Ativado' : '‚ùå Desativado',
                inline: false
            },
            {
                name: 'üõ°Ô∏è Logs de Seguran√ßa',
                value: guildConfig.logs.securityChannel ?
                    `<#${guildConfig.logs.securityChannel}>` :
                    'N√£o configurado',
                inline: true
            },
            {
                name: 'üëÆ Logs de Modera√ß√£o',
                value: guildConfig.logs.moderationChannel ?
                    `<#${guildConfig.logs.moderationChannel}>` :
                    'N√£o configurado',
                inline: true
            },
            {
                name: 'üè¢ Logs do Servidor',
                value: guildConfig.logs.serverChannel ?
                    `<#${guildConfig.logs.serverChannel}>` :
                    'N√£o configurado',
                inline: true
            }
        );

    const row2 = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
            .setCustomId('mod_logs_security')
            .setLabel('Logs de Seguran√ßa')
            .setStyle(ButtonStyle.Primary)
            .setEmoji('üõ°Ô∏è'),
        new ButtonBuilder()
            .setCustomId('mod_logs_moderation')
            .setLabel('Logs de Modera√ß√£o')
            .setStyle(ButtonStyle.Primary)
            .setEmoji('üëÆ'),
        new ButtonBuilder()
            .setCustomId('mod_logs_server')
            .setLabel('Logs do Servidor')
            .setStyle(ButtonStyle.Primary)
            .setEmoji('üè¢')
    );

    const row3 = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
            .setCustomId('configModeracao')
            .setStyle(ButtonStyle.Secondary)
            .setEmoji('<:voltar:1365849508059287633>'),
        new ButtonBuilder()
            .setCustomId('mod_logs_toggle')
            .setLabel(guildConfig.logs.enabled ? 'Desativar Logs' : 'Ativar Logs')
            .setStyle(guildConfig.logs.enabled ? ButtonStyle.Danger : ButtonStyle.Success)
            .setEmoji(guildConfig.logs.enabled ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è')
    );

    await interaction.update({
        embeds: [embed],
        components: [row2, row3],
        ephemeral: true
    });
}

async function toggleLogs(interaction, guildConfig) {
    guildConfig.logs.enabled = !guildConfig.logs.enabled;
    await saveConfig(interaction.guild.id, guildConfig);
    await showLogsPanel(interaction, guildConfig);
}

async function configureSecurityLogs(interaction, guildConfig) {
    const embed = createConfigEmbed(
        'üõ°Ô∏è Configura√ß√£o de Logs de Seguran√ßa',
        'Selecione o canal onde ser√£o registrados os eventos de seguran√ßa.',
        '#FF0000'
    )
        .addFields(
            {
                name: 'Canal Atual',
                value: guildConfig.logs.securityChannel ?
                    `<#${guildConfig.logs.securityChannel}>` :
                    'Nenhum canal configurado',
                inline: false
            }
        );

    const channelSelect = new ChannelSelectMenuBuilder()
        .setCustomId('mod_logs_security_channel')
        .setPlaceholder('Selecione o canal de logs')
        .setChannelTypes([ChannelType.GuildText]);

    const row1 = new ActionRowBuilder().addComponents(channelSelect);
    const row2 = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
            .setCustomId('mod_logs_panel')
            .setLabel('Voltar')
            .setStyle(ButtonStyle.Secondary)
            .setEmoji('<:voltar:1365849508059287633>')
    );

    await interaction.update({
        embeds: [embed],
        components: [row1, row2],
        ephemeral: true
    });
}

async function configureModerationLogs(interaction, guildConfig) {
    const embed = createConfigEmbed(
        'üëÆ Configura√ß√£o de Logs de Modera√ß√£o',
        'Selecione o canal onde ser√£o registrados os eventos de modera√ß√£o.',
        '#0099FF'
    )
        .addFields(
            {
                name: 'Canal Atual',
                value: guildConfig.logs.moderationChannel ?
                    `<#${guildConfig.logs.moderationChannel}>` :
                    'Nenhum canal configurado',
                inline: false
            }
        );

    const channelSelect = new ChannelSelectMenuBuilder()
        .setCustomId('mod_logs_moderation_channel')
        .setPlaceholder('Selecione o canal de logs')
        .setChannelTypes([ChannelType.GuildText]);

    const row1 = new ActionRowBuilder().addComponents(channelSelect);
    const row2 = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
            .setCustomId('mod_logs_panel')
            .setStyle(ButtonStyle.Secondary)
            .setEmoji('<:voltar:1365849508059287633>')
    );

    await interaction.update({
        embeds: [embed],
        components: [row1, row2],
        ephemeral: true
    });
}

async function configureServerLogs(interaction, guildConfig) {
    const embed = createConfigEmbed(
        'üè¢ Configura√ß√£o de Logs do Servidor',
        'Selecione o canal onde ser√£o registrados os eventos do servidor.',
        '#00FF00'
    )
        .addFields(
            {
                name: 'Canal Atual',
                value: guildConfig.logs.serverChannel ?
                    `<#${guildConfig.logs.serverChannel}>` :
                    'Nenhum canal configurado',
                inline: false
            }
        );

    const channelSelect = new ChannelSelectMenuBuilder()
        .setCustomId('mod_logs_server_channel')
        .setPlaceholder('Selecione o canal de logs')
        .setChannelTypes([ChannelType.GuildText]);

    const row1 = new ActionRowBuilder().addComponents(channelSelect);
    const row2 = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
            .setCustomId('mod_logs_panel')
            .setStyle(ButtonStyle.Secondary)
            .setEmoji('<:voltar:1365849508059287633>')
    );

    await interaction.update({
        embeds: [embed],
        components: [row1, row2],
        ephemeral: true
    });
}

// Handlers para sele√ß√£o de canais
async function handleSecurityChannelSelect(interaction, guildConfig) {
    try {
        const selectedChannel = interaction.values[0];
        guildConfig.logs.securityChannel = selectedChannel;
        await saveConfig(interaction.guild.id, guildConfig);

        const embed = new EmbedBuilder()
            .setTitle('üõ°Ô∏è Configura√ß√£o de Logs de Seguran√ßa')
            .setDescription(`Canal de logs configurado com sucesso para <#${selectedChannel}>`)
            .setColor('#00FF00')
            .addFields({
                name: 'Status',
                value: '‚úÖ Configura√ß√£o salva com sucesso!',
                inline: true
            });

        // Usar update ao inv√©s de reply
        await interaction.update({
            embeds: [embed],
            components: [
                new ActionRowBuilder().addComponents(
                    new ButtonBuilder()
                        .setCustomId('mod_logs_panel')
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji('<:voltar:1365849508059287633>')
                )
            ],
            ephemeral: true
        });

    } catch (error) {
        console.error('Erro ao configurar canal de seguran√ßa:', error);

        // Em caso de erro, tamb√©m usar update
        await interaction.update({
            content: '‚ùå Erro ao salvar configura√ß√£o. Tente novamente.',
            components: [
                new ActionRowBuilder().addComponents(
                    new ButtonBuilder()
                        .setCustomId('mod_logs_panel')
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji('<:voltar:1365849508059287633>')
                )
            ],
            ephemeral: true
        });
    }
}

// Aplicar a mesma l√≥gica para os outros handlers
async function handleModerationChannelSelect(interaction, guildConfig) {
    try {
        const selectedChannel = interaction.values[0];
        guildConfig.logs.moderationChannel = selectedChannel;
        await saveConfig(interaction.guild.id, guildConfig);

        const embed = new EmbedBuilder()
            .setTitle('üëÆ Configura√ß√£o de Logs de Modera√ß√£o')
            .setDescription(`Canal de logs configurado com sucesso para <#${selectedChannel}>`)
            .setColor('#00FF00')
            .addFields({
                name: 'Status',
                value: '‚úÖ Configura√ß√£o salva com sucesso!',
                inline: true
            });

        await interaction.update({
            embeds: [embed],
            components: [
                new ActionRowBuilder().addComponents(
                    new ButtonBuilder()
                        .setCustomId('mod_logs_panel')
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji('<:voltar:1365849508059287633>')
                )
            ],
            ephemeral: true
        });

    } catch (error) {
        console.error('Erro ao configurar canal de modera√ß√£o:', error);
        await interaction.update({
            content: '‚ùå Erro ao salvar configura√ß√£o. Tente novamente.',
            components: [
                new ActionRowBuilder().addComponents(
                    new ButtonBuilder()
                        .setCustomId('mod_logs_panel')
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji('<:voltar:1365849508059287633>')
                )
            ],
            ephemeral: true
        });
    }
}

async function handleServerChannelSelect(interaction, guildConfig) {
    try {
        const selectedChannel = interaction.values[0];
        guildConfig.logs.serverChannel = selectedChannel;
        await saveConfig(interaction.guild.id, guildConfig);

        const embed = new EmbedBuilder()
            .setTitle('üè¢ Configura√ß√£o de Logs do Servidor')
            .setDescription(`Canal de logs configurado com sucesso para <#${selectedChannel}>`)
            .setColor('#00FF00')
            .addFields({
                name: 'Status',
                value: '‚úÖ Configura√ß√£o salva com sucesso!',
                inline: true
            });

        await interaction.update({
            embeds: [embed],
            components: [
                new ActionRowBuilder().addComponents(
                    new ButtonBuilder()
                        .setCustomId('mod_logs_panel')
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji('<:voltar:1365849508059287633>')
                )
            ],
            ephemeral: true
        });

    } catch (error) {
        console.error('Erro ao configurar canal do servidor:', error);
        await interaction.update({
            content: '‚ùå Erro ao salvar configura√ß√£o. Tente novamente.',
            components: [
                new ActionRowBuilder().addComponents(
                    new ButtonBuilder()
                        .setCustomId('mod_logs_panel')
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji('<:voltar:1365849508059287633>')
                )
            ],
            ephemeral: true
        });
    }
}

async function handleError(interaction) {
    const errorMessage = {
        content: '‚ùå Ocorreu um erro ao processar sua solicita√ß√£o. Por favor, tente novamente.',
        ephemeral: true
    };

    if (interaction.deferred || interaction.replied) {
        await interaction.followUp(errorMessage);
    } else {
        await interaction.update(errorMessage);
    }
}

module.exports = { handleInteraction };